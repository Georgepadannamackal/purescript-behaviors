// Generated by psc version 0.6.2
var PS = PS || {};
PS.Prelude = (function () {
    "use strict";
    function Show(show) {
        this.show = show;
    };
    function Functor($less$dollar$greater) {
        this["<$>"] = $less$dollar$greater;
    };
    function showNumberImpl(n) {  return n.toString();};
    var $less$dollar$greater = function (dict) {
        return dict["<$>"];
    };
    var showNumber = new Show(showNumberImpl);
    var show = function (dict) {
        return dict.show;
    };
    return {
        "<$>": $less$dollar$greater, 
        Functor: Functor, 
        Show: Show, 
        show: show, 
        showNumber: showNumber
    };
})();
var PS = PS || {};
PS.Debug_Trace = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function trace(s) {  return function() {    console.log(s);    return {};  };};
    return {
        trace: trace
    };
})();
var PS = PS || {};
PS.FRP_Event = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
  function mapImpl(f) {
    return function(e) {
      return Behavior.Event.map(e, f);
    };
  }
  ;
    
  function subscribe(f) {
    return function(e) {
      return function() {
        e.subscribe(function(a) {
          f(a)();
        });
      };
    };
  };
  ;
    var functorEvent = new Prelude.Functor(mapImpl);
    return {
        functorEvent: functorEvent, 
        subscribe: subscribe
    };
})();
var PS = PS || {};
PS.FRP_Event_Time = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
  function interval(n) {
    return Behavior.Event.interval(n);
  }
  ;
    return {
        interval: interval
    };
})();
var PS = PS || {};
PS.Main = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var FRP_Event_Time = PS.FRP_Event_Time;
    var Debug_Trace = PS.Debug_Trace;
    var FRP_Event = PS.FRP_Event;
    var time = Prelude["<$>"](FRP_Event.functorEvent)(Prelude.show(Prelude.showNumber))(FRP_Event_Time.interval(1000));
    var main = FRP_Event.subscribe(Debug_Trace.trace)(time);
    return {
        main: main, 
        time: time
    };
})();
PS.Main.main();
